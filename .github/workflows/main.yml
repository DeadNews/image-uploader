name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

permissions:
  contents: read

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          cache: poetry

      - name: Install deps
        run: poetry install

      - name: Lint code
        run: poetry run poe lint

  tests:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Install deps
        run: poetry install

      - name: Run tests
        run: poetry run poe test
        env:
          UPLOADCARE_KEY: ${{ secrets.UPLOADCARE_KEY }}

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@4fe8c5f003fae66aa5ebb77cfd3e7bfbbda0b6b0 # v3.1.5

  publish-pypi:
    name: Release to PyPI
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [lint, tests]
    permissions:
      id-token: write
    environment: pypi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: |
          pipx install poetry
          pipx inject poetry poetry-dynamic-versioning[plugin]

      - uses: actions/setup-python@v5

      - name: Build package
        run: poetry build

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@2f6f737ca5f74c637829c0f5c3acd0e29ea5e8bf # v1.8.11

  publish-aur:
    name: Release to AUR
    if: github.event.release.prerelease != true
    needs: [publish-pypi]
    environment: aur
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          sed -i "s|\(^pkgver=\).*$|\1\"${VERSION}\"|" ./PKGBUILD

      - name: Deploy PKGBUILD to the Arch User Repository
        uses: KSXGitHub/github-actions-deploy-aur@063daf78a56662642bb00049ce78425ff6d0fad7 # v2.7.0
        with:
          pkgname: python-images-upload-cli
          pkgbuild: ./PKGBUILD
          commit_username: DeadNews
          commit_email: aurczpbgr@mozmail.com
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Upstream release ${{ github.ref }}
          updpkgsums: true

  build-win:
    name: Windows Build
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [lint, tests]
    permissions:
      contents: write
    env:
      BINARY: images-upload-cli.exe
      ASSET: images-upload-cli_${{ github.ref_name }}_windows_amd64.zip
      SUMS: images-upload-cli_${{ github.ref_name }}.txt
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: poetry

      - name: Install deps
        run: poetry install

      - name: Build binaries
        uses: nuitka/nuitka-action@12e193a947ea7cb9c807a4e4161092f2c16ac501 # v1.1
        with:
          nuitka-version: main
          script-name: src/images_upload_cli/__main__.py
          output-dir: dist
          output-file: ${{ env.BINARY }}
          onefile: true

      - name: Archive binaries
        run: poetry run python -m zipfile --create ${{ env.ASSET }} dist/${{ env.BINARY }}

      - name: Generate checksums
        run: |
          checksum=$(python -c "import hashlib; print(hashlib.sha256(open('${{ env.ASSET }}', 'rb').read()).hexdigest())")
          echo "${{ env.ASSET }}  ${checksum}" > ${{ env.SUMS }}

      - name: Upload binaries to Release
        run: gh release upload ${{ github.ref_name }} ${{ env.ASSET }} ${{ env.SUMS }} --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
